\def(allows-global-redo)Allows global redo example;
Tools that provide a HistoryContext typically feature a private
undo-stack.

By specializing HistoryContext::AllowGlobalRedo() such tools can
inhibit the regular "outside tool-"Redo, even when the tool currently
has no redoable command.

For example, When using the Polygon tool, points are added on left
click. This can be undone with Ctrl+Z, and redone with Ctrl+Y. When
there is nothing to redo in the tool (i.e. at the last added point),
its HistoryContext::CanRedo() will return false. Normally, the regular
redo stack would now take precedence.

However: the PolygonTool:s HistoryContext::AllowsGlobalRedo will be
false even if CanRedo is false, since otherwise, if there was an
image-level redo available, the tool would, surprisingly, be preempted
on a call to Redo() and the image modified in the middle of point
editing.

A similar function for undo is not required, as the tool can simply be
preempted when undone past its initial action.

\def(draw-before-zoom)Draw before zoom;
Tool::DrawBeforeZoom controls the configuration of the FaintDC passed
to Tool::Draw.

Vector output from tools should be drawn, with scaled coordinates and
widths *after* the view is zoomed (i.e. onto the already scaled bitmap
background), so that the output appears sharp at all zoom levels.

Raster output should be drawn onto the background *before* the view is
zoomed, so that the actual pixel data is scaled as if it was part
of the background.

\def(refresh-on-mouse-out)Refresh on mouse out;
Tool::RefreshOnMouseOut is used to avoid leaving droppings when the
mouse leaves the drawing area for another window or panel (when not
capturing mouse).
<refresh-on-mouse-out.png>

The droppings would not modify the actual image data, but the area
they're in might not be refreshed for some time, which would make it
appear as if the image had been modified.

\def(rotation-blending)Rotation blending;
Rotation from the rotate dialog is performed by creating a larger
destination bitmap, filled with the secondary color, which the rotated
bitmap is drawn onto, using Cairo.

This previously used the unsuitable CAIRO_OPERATOR_OVER compositing mode,
and therefore lost alpha in the rotated pixels, as they were blended
onto the background.

I fixed this by using CAIRO_OPERATOR_SOURCE, which sets the pixels,
and used a clip-region to avoid overwriting the "new pixels" around
the rotated area with transparency.

Unfortunately, this caused a border at the edge of the clip-region,
most obvious when rotating towards the same background as the former edge:
<rotation-blending.png>
<- A white image rotated 45 degrees with white background selected
gets a spurious border.

Currently (2014-09-24 onwards) I'm avoiding this by using a smaller
clip-region than the actual rotated destination region, but this loses
pixels. There's probably a better way to do it.

\def(new-style-events)New event-style, events::on_...;
I've started wrapping wxWidgets event-binding in functions that take
lambdas and using those functions from wxWindow-sub-class constructors
to simplify event-binding while still avoiding the old wxWidgets
macros.

This also lets me get away with including much less of wxWidgets in
some files.

Functions for binding regular wxWidgets events are declared in
util-wx/fwd-bind.hh.

Faint-specific events are added to the events-namespace in the header
declaring the new control.

Todo:
Maybe add events::on_left_down_modifiers(Point, ctrl and so on);
Add wxEVT_COMMAND_TEXT_UPDATED. (Non-skipping probably).

Skipping (i.e. propagating events) when:
* Focus-event: Always skip (maybe), i.e. on_focus_lost, on_focus_gained
* Button and such, never (I guess).

 "In general, it is recommended to skip all non-command events to
 allow the default handling to take place. The command events are,
 however, normally not skipped as usually a single command such as a
 button click or menu item selection must only be processed by one
 handler."

Create Faint PaintDC:
 Pass it to on_paint-handlers. (fwd-bind.hh)
 + Helper for drawing faint::Bitmap on window_t
